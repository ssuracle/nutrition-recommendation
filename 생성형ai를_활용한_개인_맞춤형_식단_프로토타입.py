# -*- coding: utf-8 -*-
"""생성형AI를 활용한 개인 맞춤형 식단_프로토타입.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XwkFxW6OJHoM2UszS3AgkFw88vBiMTz3

# Custom Calculation and API Usage

`사용자에게 맞는 영양소 요구량을 계산하고, Nutritionix API를 통해 음식 데이터를 가져오고, 양양소 목표를 계산하는 방식입니다. 이를 코드로 표현하면 다음과 같은 방식으로 사용자에게 맞는 영양소 요구량을 계산할 수 있습니다.`

## 기초 대사량과 칼로리 요구량 계산

#### 기초대사량(BMR)

`사용자의 신체 정보를 바탕으로 하루에 필요한 기초 칼로리를 계산합니다. 이 계산을 통해 전체 칼로리 요구량을 도출할 수 있습니다. `

`Mifflin-St Jeor Equation:`

`남성: BMR = 10 * 체중(kg) + 6.25 * 키(cm) - 5 * 나이 + 5`
`여성: BMR = 10 * 체중(kg) + 6.25 * 키(cm) - 5 * 나이 - 161`
"""

def calculate_bmr(weight, height, age, gender):
    if gender == 'male':
        return 10 * weight + 6.25 * height - 5 * age + 5
    else:
        return 10 * weight + 6.25 * height - 5 * age - 161

# 몸무게, 체중, 연령 및 성별을 활용해 일일 칼로리 요구량을 계산
bmr = calculate_bmr(100, 170, 54, 'male')
print(bmr)

"""#### 활동 수준 반영

`사용자의 활동량에 따라 기초대사량에 추가 칼로리를 더합니다.`

`활동 없음: BMR * 1.2`
`적당한 활동: BMR * 1.55`
`활동 많음: BMR * 1.725`
"""

def calculate_daily_calories(bmr, activity_level):
    if activity_level == 'sedentary':
        return bmr * 1.2
    elif activity_level == 'moderate':
        return bmr * 1.55
    elif activity_level == 'active':
        return bmr * 1.725

# 활동량에 따라 조정
calories = calculate_daily_calories(bmr, 'active')
print(calories)

"""## 필요 영양소 비율 설정

`영양소 비율 계산: 일일 권장 칼로리에서 각 영양소의 비율을 설정합니다. 예를 들어, 일반적인 권장 비율은 다음과 같습니다:`

`탄수화물: 45-65%`
`단백질: 10-35%`
`지방: 20-35%`
"""

def calculate_nutrient_goals(calories):
    # 탄수화물, 단백질, 지방의 비율 설정
    carb_goal = calories * 0.5 / 4  # 1g 탄수화물 = 4kcal
    protein_goal = calories * 0.2 / 4  # 1g 단백질 = 4kcal
    fat_goal = calories * 0.3 / 9  # 1g 지방 = 9kcal

    return {'carbs': carb_goal, 'protein': protein_goal, 'fats': fat_goal}

# 필요 칼로리를 탄수화물, 단백질, 그리고 지방으로 요구량 배분
calculate_nutrient_goals(calories)

"""# Nutritionix API를 사용한 음식 분석

`Nutritionix API에 가서 API키 발급 `

[Nutritionix API 바로 가기](https://www.nutritionix.com/business/api)
"""

import requests

def get_nutrition_from_api(food_item):
    api_url = "https://trackapi.nutritionix.com/v2/natural/nutrients"
    headers = {
        "x-app-id": "5fbb52ae",
        "x-app-key": "a0d7d77cc3991149fa147c5fd422d278",
        "Content-Type": "application/json"
    }
    data = {"query": food_item}
    response = requests.post(api_url, headers=headers, json=data)
    nutrients = response.json()
    calories = nutrients['foods'][0]['nf_calories']
    protein = nutrients['foods'][0]['nf_protein']
    carbs = nutrients['foods'][0]['nf_total_carbohydrate']
    fats = nutrients['foods'][0]['nf_total_fat']

    return {'carbs': carbs, 'protein': protein, 'fats': fats}

# 음식 분석 예시
food_data = get_nutrition_from_api("1 apple")
print(food_data)

"""# 필요 영양소와 섭취량 비교"""

def compare_intake_and_goals(current_intake, nutrient_goals):
    comparison = {}
    for nutrient, goal in nutrient_goals.items():
        if current_intake[nutrient] < goal:
            comparison[nutrient] = f"Need more {nutrient}"
        else:
            comparison[nutrient] = f"Enough {nutrient}"
    return comparison

# 예시 사용
current_intake = food_data
nutrient_goals = calculate_nutrient_goals(calories)
print(compare_intake_and_goals(current_intake, nutrient_goals))